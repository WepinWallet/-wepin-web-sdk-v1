import{ethErrors as r}from"eth-rpc-errors";import{signTransactionParameterChecker as a}from"../utils/paramChecker.js";import{getSelectedAddress as i}from"../utils/selectedAddress.js";import{parsingSolanaTransaction as e}from"../utils/solanaParser.js";import{getAddress as s}from"../utils/utils.js";import{signTransaction as t}from"./signTransaction.js";export var solanaSignTransaction=function(n){var o=n.wepinProvider,p=n.network;return function(n,m,u,d){if(!o._isInitialized){d(r.provider.unauthorized());return}var l,c,v=!1;Object.keys(n.params).includes("message")||Object.keys(n.params).includes("transaction")||(d(r.rpc.invalidParams()),v=!0);try{if(l=e(Object.values(n.params)[0]),void 0===l.value){var f=Object.values(n.params)[0];l.data=f.startsWith("0x")?f:"0x"+f}else a(l)||(d(r.rpc.invalidParams()),v=!0)}catch(a){d(r.rpc.invalidParams());return}var j=null!==(c=l.from)&&void 0!==c?c:"";i(o.wepinStorage,o.wepinAppId,p).then(function(a){if((null==a?void 0:a.address)!==s(p,j)){d(r.provider.unauthorized());return}v||(n.params=[l],t({wepinProvider:o,network:p})(n,m,u,d))})}};